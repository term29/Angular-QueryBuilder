[{"__symbolic":"module","version":3,"metadata":{"CONTROL_VALUE_ACCESSOR":{"provide":{"__symbolic":"reference","module":"@angular/forms","name":"NG_VALUE_ACCESSOR"},"useExisting":{"__symbolic":"reference","name":"QueryBuilderComponent"},"multi":true},"VALIDATOR":{"provide":{"__symbolic":"reference","module":"@angular/forms","name":"NG_VALIDATORS"},"useExisting":{"__symbolic":"reference","name":"QueryBuilderComponent"},"multi":true},"QueryBuilderComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"query-builder","template":"\n    <div [ngClass]=\"getClassNames('switchRow')\">\n      <ng-template #defaultArrowIcon>\n        <i [ngClass]=\"getClassNames('arrowIcon')\"></i>\n      </ng-template>\n\n      <a *ngIf=\"allowCollapse\" (click)=\"toggleCollapse()\" [ngClass]=\"getClassNames('arrowIconButton', data.collapsed ? 'collapsed' : null)\">\n        <ng-container *ngIf=\"getArrowIconTemplate() as template; else defaultArrowIcon\">\n          <ng-container *ngTemplateOutlet=\"template; context: getArrowIconContext()\"></ng-container>\n        </ng-container>\n      </a>\n\n      <ng-container *ngIf=\"getButtonGroupTemplate() as template; else defaultButtonGroup\">\n        <div [ngClass]=\"getClassNames('buttonGroup', 'rightAlign')\">\n          <ng-container *ngTemplateOutlet=\"template; context: getButtonGroupContext()\"></ng-container>\n        </div>\n      </ng-container>\n\n      <ng-template #defaultButtonGroup>\n        <div [ngClass]=\"getClassNames('buttonGroup', 'rightAlign')\">\n          <button type=\"button\" (click)=\"addRule()\" [ngClass]=\"getClassNames('button')\" [disabled]=disabled>\n            <i [ngClass]=\"getClassNames('addIcon')\"></i> Rule\n          </button>\n          <button type=\"button\" (click)=\"addRuleSet()\" [ngClass]=\"getClassNames('button')\" *ngIf=\"allowRuleset\" [disabled]=disabled>\n            <i [ngClass]=\"getClassNames('addIcon')\"></i> Ruleset\n          </button>\n          <ng-container *ngIf=\"!!parentValue && allowRuleset\">\n            <button type=\"button\" (click)=\"removeRuleSet()\" [ngClass]=\"getClassNames('button', 'removeButton')\" [disabled]=disabled>\n              <i [ngClass]=\"getClassNames('removeIcon')\"></i>\n            </button>\n          </ng-container>\n        </div>\n      </ng-template>\n\n      <ng-container *ngIf=\"getSwitchGroupTemplate() as template; else defaultSwitchGroup\">\n        <ng-container *ngTemplateOutlet=\"template; context: getSwitchGroupContext()\"></ng-container>\n      </ng-container>\n\n      <ng-template #defaultSwitchGroup>\n        <div [ngClass]=\"getClassNames('switchGroup', 'transition')\" *ngIf=\"data\">\n          <div [ngClass]=\"getClassNames('switchControl')\">\n            <input type=\"radio\" [ngClass]=\"getClassNames('switchRadio')\" [(ngModel)]=\"data.condition\" [disabled]=disabled value=\"and\"\n              #andOption/>\n            <label (click)=\"changeCondition(andOption.value)\" [ngClass]=\"getClassNames('switchLabel')\">AND</label>\n          </div>\n          <div [ngClass]=\"getClassNames('switchControl')\">\n            <input type=\"radio\" [ngClass]=\"getClassNames('switchRadio')\" [(ngModel)]=\"data.condition\" [disabled]=disabled value=\"or\"\n              #orOption/>\n            <label (click)=\"changeCondition(orOption.value)\" [ngClass]=\"getClassNames('switchLabel')\">OR</label>\n          </div>\n        </div>\n      </ng-template>\n    </div>\n\n    <div #treeContainer (transitionend)=\"transitionEnd($event)\" [ngClass]=\"getClassNames('treeContainer', data.collapsed ? 'collapsed' : null)\">\n      <ul [ngClass]=\"getClassNames('tree')\" *ngIf=\"data && data.rules\">\n        <ng-container *ngFor=\"let rule of data.rules\">\n          <ng-container *ngIf=\"{ruleset: !!rule.rules, invalid: !config.allowEmptyRulesets && rule.rules && rule.rules.length === 0} as local\">\n            <li [ngClass]=\"getQueryItemClassName(local)\">\n              <ng-container *ngIf=\"!local.ruleset\">\n\n                <ng-container *ngIf=\"getRemoveButtonTemplate() as template; else defaultRemoveButton\">\n                  <div [ngClass]=\"getClassNames('buttonGroup', 'rightAlign')\">\n                    <ng-container *ngTemplateOutlet=\"template; context: getRemoveButtonContext(rule)\"></ng-container>\n                  </div>\n                </ng-container>\n\n                <ng-template #defaultRemoveButton>\n                  <div [ngClass]=\"getClassNames('removeButtonSize', 'rightAlign')\">\n                    <button type=\"button\" [ngClass]=\"getClassNames('button', 'removeButton')\" (click)=\"removeRule(rule, data)\" [disabled]=disabled>\n                      <i [ngClass]=\"getClassNames('removeIcon')\"></i>\n                    </button>\n                  </div>\n                </ng-template>\n\n                <div *ngIf=\"entities?.length > 0\" class=\"q-inline-block-display\">\n                  <ng-container *ngIf=\"getEntityTemplate() as template; else defaultEntity\">\n                    <ng-container *ngTemplateOutlet=\"template; context: getEntityContext(rule)\"></ng-container>\n                  </ng-container>\n                </div>\n\n                <ng-template #defaultEntity>\n                  <div [ngClass]=\"getClassNames('entityControlSize')\">\n                    <select [ngClass]=\"getClassNames('entityControl')\" [(ngModel)]=\"rule.entity\" (ngModelChange)=\"changeEntity($event, rule)\"\n                      [disabled]=\"disabled\">\n                      <option *ngFor=\"let entity of entities\" [ngValue]=\"entity.value\">\n                        {{entity.name}}\n                      </option>\n                    </select>\n                  </div>\n                </ng-template>\n\n                <ng-container *ngIf=\"getFieldTemplate() as template; else defaultField\">\n                  <ng-container *ngTemplateOutlet=\"template; context: getFieldContext(rule)\"></ng-container>\n                </ng-container>\n\n                <ng-template #defaultField>\n                  <div [ngClass]=\"getClassNames('fieldControlSize')\">\n                    <select [ngClass]=\"getClassNames('fieldControl')\" [(ngModel)]=\"rule.field\" (ngModelChange)=\"changeField($event, rule)\" [disabled]=\"disabled\">\n                      <option *ngFor=\"let field of getFields(rule.entity)\" [ngValue]=\"field.value\">\n                        {{field.name}}\n                      </option>\n                    </select>\n                  </div>\n                </ng-template>\n\n                <ng-container *ngIf=\"getOperatorTemplate() as template; else defaultOperator\">\n                  <ng-container *ngTemplateOutlet=\"template; context: getOperatorContext(rule)\"></ng-container>\n                </ng-container>\n\n                <ng-template #defaultOperator>\n                  <div [ngClass]=\"getClassNames('operatorControlSize')\">\n                    <select [ngClass]=\"getClassNames('operatorControl')\" [(ngModel)]=\"rule.operator\" (ngModelChange)=\"changeOperator(rule)\" [disabled]=\"disabled\">\n                      <option *ngFor=\"let operator of getOperators(rule.field)\" [ngValue]=\"operator\">\n                        {{operator}}\n                      </option>\n                    </select>\n                  </div>\n                </ng-template>\n\n                <ng-container *ngIf=\"findTemplateForRule(rule) as template; else defaultInput\">\n                  <ng-container *ngTemplateOutlet=\"template; context: getInputContext(rule)\"></ng-container>\n                </ng-container>\n\n                <ng-template #defaultInput>\n                  <div [ngClass]=\"getClassNames('inputControlSize')\" [ngSwitch]=\"getInputType(rule.field, rule.operator)\">\n                    <input [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\" [disabled]=\"disabled\"\n                      *ngSwitchCase=\"'string'\" type=\"text\">\n                    <input [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\" [disabled]=\"disabled\"\n                      *ngSwitchCase=\"'number'\" type=\"number\">\n                    <input [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\" [disabled]=\"disabled\"\n                      *ngSwitchCase=\"'date'\" type=\"date\">\n                    <input [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\" [disabled]=\"disabled\"\n                      *ngSwitchCase=\"'time'\" type=\"time\">\n                    <select [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\" [disabled]=\"disabled\"\n                      *ngSwitchCase=\"'category'\">\n                      <option *ngFor=\"let opt of getOptions(rule.field)\" [ngValue]=\"opt.value\">\n                        {{opt.name}}\n                      </option>\n                    </select>\n                    <ng-container *ngSwitchCase=\"'multiselect'\">\n                      <select [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\" [disabled]=\"disabled\"\n                        multiple>\n                        <option *ngFor=\"let opt of getOptions(rule.field)\" [ngValue]=\"opt.value\">\n                          {{opt.name}}\n                        </option>\n                      </select>\n                    </ng-container>\n                    <input [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\" [disabled]=\"disabled\"\n                      *ngSwitchCase=\"'boolean'\" type=\"checkbox\">\n                  </div>\n                </ng-template>\n\n              </ng-container>\n              <query-builder *ngIf=\"local.ruleset\" [data]=\"rule\" [disabled]=\"disabled\" [parentTouchedCallback]=\"parentTouchedCallback || onTouchedCallback\"\n                [parentChangeCallback]=\"parentChangeCallback || onChangeCallback\" [parentInputTemplates]=\"parentInputTemplates || inputTemplates\"\n                [parentOperatorTemplate]=\"parentOperatorTemplate || operatorTemplate\" [parentFieldTemplate]=\"parentFieldTemplate || fieldTemplate\"\n                [parentEntityTemplate]=\"parentEntityTemplate || entityTemplate\" [parentSwitchGroupTemplate]=\"parentSwitchGroupTemplate || switchGroupTemplate\"\n                [parentButtonGroupTemplate]=\"parentButtonGroupTemplate || buttonGroupTemplate\" [parentRemoveButtonTemplate]=\"parentRemoveButtonTemplate || removeButtonTemplate\"\n                [parentEmptyWarningTemplate]=\"parentEmptyWarningTemplate || emptyWarningTemplate\" [parentArrowIconTemplate]=\"parentArrowIconTemplate || arrowIconTemplate\"\n                [parentValue]=\"data\" [classNames]=\"classNames\" [config]=\"config\" [allowRuleset]=\"allowRuleset\" [allowCollapse]=\"allowCollapse\"\n                [emptyMessage]=\"emptyMessage\" [operatorMap]=\"operatorMap\">\n              </query-builder>\n\n              <ng-container *ngIf=\"getEmptyWarningTemplate() as template; else defaultEmptyWarning\">\n                <ng-container *ngIf=\"local.invalid\">\n                  <ng-container *ngTemplateOutlet=\"template; context: getEmptyWarningContext()\"></ng-container>\n                </ng-container>\n              </ng-container>\n\n              <ng-template #defaultEmptyWarning>\n                <p [ngClass]=\"getClassNames('emptyWarning')\" *ngIf=\"local.invalid\">\n                  {{emptyMessage}}\n                </p>\n              </ng-template>\n            </li>\n          </ng-container>\n        </ng-container>\n      </ul>\n    </div>\n  ","styles":["\n    ﻿:host{display:block;width:100%}:host .q-icon{font-style:normal;font-size:12px}:host .q-remove-icon::before{content:'❌'}:host .q-arrow-icon-button{float:left;margin:4px 6px 4px 0;transform:rotate(90deg);transition:linear 0.25s transform;cursor:pointer}:host .q-arrow-icon-button.q-collapsed{transform:rotate(0)}:host .q-arrow-icon::before{content:'▶'}:host .q-add-icon{color:#555}:host .q-add-icon::before{content:'➕'}:host .q-remove-button{color:#B3415D;width:31px}:host .q-switch-group,:host .q-button-group{font-family:\"Lucida Grande\", Tahoma, Verdana, sans-serif;overflow:hidden}:host .q-right-align{float:right}:host .q-button{margin-left:8px;padding:0 8px;background-color:white}:host .q-button:disabled{display:none}:host .q-control-size{display:inline-block;vertical-align:top;padding-right:10px}:host .q-input-control,:host .q-operator-control,:host .q-field-control,:host .q-entity-control{display:inline-block;padding:5px 8px;color:#555;background-color:#fff;background-image:none;border:1px solid #ccc;border-radius:4px;box-sizing:border-box;width:auto}:host .q-input-control:disabled,:host .q-operator-control:disabled,:host .q-field-control:disabled,:host .q-entity-control:disabled{border-color:transparent}:host .q-operator-control,:host .q-field-control,:host .q-entity-control,:host .q-input-control:not([type='checkbox']){min-height:32px;-webkit-appearance:none}:host .q-switch-label,:host .q-button{float:left;margin-bottom:0;font-size:14px;line-height:30px;font-weight:normal;text-align:center;text-shadow:none;border:1px solid rgba(0,0,0,0.2);box-sizing:border-box}:host .q-switch-label:hover,:host .q-button:hover{cursor:pointer;background-color:#F0F0F0}:host .q-switch-label{background-color:#e4e4e4;padding:0 8px}:host .q-switch-radio{position:absolute;clip:rect(0, 0, 0, 0);height:1px;width:1px;border:0;overflow:hidden}:host .q-switch-radio:checked+.q-switch-label{border:1px solid #619ed7;background:white;color:#3176b3}:host .q-switch-radio:disabled+.q-switch-label{display:none}:host .q-switch-radio:checked:disabled+.q-switch-label{display:initial;color:initial;cursor:default;border-color:transparent}:host .q-invalid-ruleset{border:1px solid rgba(179,65,93,0.5) !important;background:rgba(179,65,93,0.1) !important}:host .q-empty-warning{color:#8d252e;text-align:center}:host .q-ruleset{border:1px solid #CCC}:host .q-rule{border:1px solid #CCC;background:white}:host .q-transition{-webkit-transition:all 0.1s ease-in-out;-moz-transition:all 0.1s ease-in-out;-ms-transition:all 0.1s ease-in-out;-o-transition:all 0.1s ease-in-out;transition:all 0.1s ease-in-out}:host .q-tree-container{width:100%;overflow:hidden;transition:ease-in 0.25s max-height}:host .q-tree-container.q-collapsed{max-height:0 !important}:host .q-tree{list-style:none;margin:4px 0 2px}:host .q-row{padding:6px 8px;margin-top:6px}:host .q-connector{position:relative}:host .q-connector::before{top:-5px;border-width:0 0 2px 2px}:host .q-connector::after{border-width:0 0 0 2px;top:50%}:host .q-connector::before,:host .q-connector::after{content:'';left:-12px;border-color:#CCC;border-style:solid;width:9px;height:calc(50% + 6px);position:absolute}:host .q-connector:last-child::after{content:none}:host .q-inline-block-display{display:inline-block;vertical-align:top}\n  "],"providers":[{"__symbolic":"reference","name":"CONTROL_VALUE_ACCESSOR"},{"__symbolic":"reference","name":"VALIDATOR"}]}]}],"members":{"disabled":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"data":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"allowRuleset":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"allowCollapse":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"emptyMessage":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"classNames":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"operatorMap":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentValue":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"config":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentArrowIconTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentInputTemplates":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentOperatorTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentFieldTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentEntityTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentSwitchGroupTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentButtonGroupTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentRemoveButtonTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentEmptyWarningTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentChangeCallback":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentTouchedCallback":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"treeContainer":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["treeContainer"]}]}],"buttonGroupTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":[{"__symbolic":"reference","module":"./query-button-group.directive","name":"QueryButtonGroupDirective"}]}]}],"switchGroupTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":[{"__symbolic":"reference","module":"./query-switch-group.directive","name":"QuerySwitchGroupDirective"}]}]}],"fieldTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":[{"__symbolic":"reference","module":"./query-field.directive","name":"QueryFieldDirective"}]}]}],"entityTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":[{"__symbolic":"reference","module":"./query-entity.directive","name":"QueryEntityDirective"}]}]}],"operatorTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":[{"__symbolic":"reference","module":"./query-operator.directive","name":"QueryOperatorDirective"}]}]}],"removeButtonTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":[{"__symbolic":"reference","module":"./query-remove-button.directive","name":"QueryRemoveButtonDirective"}]}]}],"emptyWarningTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":[{"__symbolic":"reference","module":"./query-empty-warning.directive","name":"QueryEmptyWarningDirective"}]}]}],"inputTemplates":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChildren"},"arguments":[{"__symbolic":"reference","module":"./query-input.directive","name":"QueryInputDirective"}]}]}],"arrowIconTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":[{"__symbolic":"reference","module":"./query-arrow-icon.directive","name":"QueryArrowIconDirective"}]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef"}]}],"ngOnInit":[{"__symbolic":"method"}],"ngOnChanges":[{"__symbolic":"method"}],"validate":[{"__symbolic":"method"}],"value":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"writeValue":[{"__symbolic":"method"}],"registerOnChange":[{"__symbolic":"method"}],"registerOnTouched":[{"__symbolic":"method"}],"setDisabledState":[{"__symbolic":"method"}],"findTemplateForRule":[{"__symbolic":"method"}],"findQueryInput":[{"__symbolic":"method"}],"getOperators":[{"__symbolic":"method"}],"getFields":[{"__symbolic":"method"}],"getInputType":[{"__symbolic":"method"}],"getOptions":[{"__symbolic":"method"}],"getClassNames":[{"__symbolic":"method"}],"getDefaultField":[{"__symbolic":"method"}],"getDefaultOperator":[{"__symbolic":"method"}],"addRule":[{"__symbolic":"method"}],"removeRule":[{"__symbolic":"method"}],"addRuleSet":[{"__symbolic":"method"}],"removeRuleSet":[{"__symbolic":"method"}],"transitionEnd":[{"__symbolic":"method"}],"toggleCollapse":[{"__symbolic":"method"}],"computedTreeContainerHeight":[{"__symbolic":"method"}],"changeCondition":[{"__symbolic":"method"}],"changeOperator":[{"__symbolic":"method"}],"coerceValueForOperator":[{"__symbolic":"method"}],"changeInput":[{"__symbolic":"method"}],"changeField":[{"__symbolic":"method"}],"changeEntity":[{"__symbolic":"method"}],"getDefaultValue":[{"__symbolic":"method"}],"getOperatorTemplate":[{"__symbolic":"method"}],"getFieldTemplate":[{"__symbolic":"method"}],"getEntityTemplate":[{"__symbolic":"method"}],"getArrowIconTemplate":[{"__symbolic":"method"}],"getButtonGroupTemplate":[{"__symbolic":"method"}],"getSwitchGroupTemplate":[{"__symbolic":"method"}],"getRemoveButtonTemplate":[{"__symbolic":"method"}],"getEmptyWarningTemplate":[{"__symbolic":"method"}],"getQueryItemClassName":[{"__symbolic":"method"}],"getButtonGroupContext":[{"__symbolic":"method"}],"getRemoveButtonContext":[{"__symbolic":"method"}],"getFieldContext":[{"__symbolic":"method"}],"getEntityContext":[{"__symbolic":"method"}],"getSwitchGroupContext":[{"__symbolic":"method"}],"getArrowIconContext":[{"__symbolic":"method"}],"getEmptyWarningContext":[{"__symbolic":"method"}],"getOperatorContext":[{"__symbolic":"method"}],"getInputContext":[{"__symbolic":"method"}],"checkEmptyRuleInRuleset":[{"__symbolic":"method"}],"validateRulesInRuleset":[{"__symbolic":"method"}],"handleDataChange":[{"__symbolic":"method"}],"handleTouched":[{"__symbolic":"method"}]}}}},{"__symbolic":"module","version":1,"metadata":{"CONTROL_VALUE_ACCESSOR":{"provide":{"__symbolic":"reference","module":"@angular/forms","name":"NG_VALUE_ACCESSOR"},"useExisting":{"__symbolic":"reference","name":"QueryBuilderComponent"},"multi":true},"VALIDATOR":{"provide":{"__symbolic":"reference","module":"@angular/forms","name":"NG_VALIDATORS"},"useExisting":{"__symbolic":"reference","name":"QueryBuilderComponent"},"multi":true},"QueryBuilderComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"query-builder","template":"\n    <div [ngClass]=\"getClassNames('switchRow')\">\n      <ng-template #defaultArrowIcon>\n        <i [ngClass]=\"getClassNames('arrowIcon')\"></i>\n      </ng-template>\n\n      <a *ngIf=\"allowCollapse\" (click)=\"toggleCollapse()\" [ngClass]=\"getClassNames('arrowIconButton', data.collapsed ? 'collapsed' : null)\">\n        <ng-container *ngIf=\"getArrowIconTemplate() as template; else defaultArrowIcon\">\n          <ng-container *ngTemplateOutlet=\"template; context: getArrowIconContext()\"></ng-container>\n        </ng-container>\n      </a>\n\n      <ng-container *ngIf=\"getButtonGroupTemplate() as template; else defaultButtonGroup\">\n        <div [ngClass]=\"getClassNames('buttonGroup', 'rightAlign')\">\n          <ng-container *ngTemplateOutlet=\"template; context: getButtonGroupContext()\"></ng-container>\n        </div>\n      </ng-container>\n\n      <ng-template #defaultButtonGroup>\n        <div [ngClass]=\"getClassNames('buttonGroup', 'rightAlign')\">\n          <button type=\"button\" (click)=\"addRule()\" [ngClass]=\"getClassNames('button')\" [disabled]=disabled>\n            <i [ngClass]=\"getClassNames('addIcon')\"></i> Rule\n          </button>\n          <button type=\"button\" (click)=\"addRuleSet()\" [ngClass]=\"getClassNames('button')\" *ngIf=\"allowRuleset\" [disabled]=disabled>\n            <i [ngClass]=\"getClassNames('addIcon')\"></i> Ruleset\n          </button>\n          <ng-container *ngIf=\"!!parentValue && allowRuleset\">\n            <button type=\"button\" (click)=\"removeRuleSet()\" [ngClass]=\"getClassNames('button', 'removeButton')\" [disabled]=disabled>\n              <i [ngClass]=\"getClassNames('removeIcon')\"></i>\n            </button>\n          </ng-container>\n        </div>\n      </ng-template>\n\n      <ng-container *ngIf=\"getSwitchGroupTemplate() as template; else defaultSwitchGroup\">\n        <ng-container *ngTemplateOutlet=\"template; context: getSwitchGroupContext()\"></ng-container>\n      </ng-container>\n\n      <ng-template #defaultSwitchGroup>\n        <div [ngClass]=\"getClassNames('switchGroup', 'transition')\" *ngIf=\"data\">\n          <div [ngClass]=\"getClassNames('switchControl')\">\n            <input type=\"radio\" [ngClass]=\"getClassNames('switchRadio')\" [(ngModel)]=\"data.condition\" [disabled]=disabled value=\"and\"\n              #andOption/>\n            <label (click)=\"changeCondition(andOption.value)\" [ngClass]=\"getClassNames('switchLabel')\">AND</label>\n          </div>\n          <div [ngClass]=\"getClassNames('switchControl')\">\n            <input type=\"radio\" [ngClass]=\"getClassNames('switchRadio')\" [(ngModel)]=\"data.condition\" [disabled]=disabled value=\"or\"\n              #orOption/>\n            <label (click)=\"changeCondition(orOption.value)\" [ngClass]=\"getClassNames('switchLabel')\">OR</label>\n          </div>\n        </div>\n      </ng-template>\n    </div>\n\n    <div #treeContainer (transitionend)=\"transitionEnd($event)\" [ngClass]=\"getClassNames('treeContainer', data.collapsed ? 'collapsed' : null)\">\n      <ul [ngClass]=\"getClassNames('tree')\" *ngIf=\"data && data.rules\">\n        <ng-container *ngFor=\"let rule of data.rules\">\n          <ng-container *ngIf=\"{ruleset: !!rule.rules, invalid: !config.allowEmptyRulesets && rule.rules && rule.rules.length === 0} as local\">\n            <li [ngClass]=\"getQueryItemClassName(local)\">\n              <ng-container *ngIf=\"!local.ruleset\">\n\n                <ng-container *ngIf=\"getRemoveButtonTemplate() as template; else defaultRemoveButton\">\n                  <div [ngClass]=\"getClassNames('buttonGroup', 'rightAlign')\">\n                    <ng-container *ngTemplateOutlet=\"template; context: getRemoveButtonContext(rule)\"></ng-container>\n                  </div>\n                </ng-container>\n\n                <ng-template #defaultRemoveButton>\n                  <div [ngClass]=\"getClassNames('removeButtonSize', 'rightAlign')\">\n                    <button type=\"button\" [ngClass]=\"getClassNames('button', 'removeButton')\" (click)=\"removeRule(rule, data)\" [disabled]=disabled>\n                      <i [ngClass]=\"getClassNames('removeIcon')\"></i>\n                    </button>\n                  </div>\n                </ng-template>\n\n                <div *ngIf=\"entities?.length > 0\" class=\"q-inline-block-display\">\n                  <ng-container *ngIf=\"getEntityTemplate() as template; else defaultEntity\">\n                    <ng-container *ngTemplateOutlet=\"template; context: getEntityContext(rule)\"></ng-container>\n                  </ng-container>\n                </div>\n\n                <ng-template #defaultEntity>\n                  <div [ngClass]=\"getClassNames('entityControlSize')\">\n                    <select [ngClass]=\"getClassNames('entityControl')\" [(ngModel)]=\"rule.entity\" (ngModelChange)=\"changeEntity($event, rule)\"\n                      [disabled]=\"disabled\">\n                      <option *ngFor=\"let entity of entities\" [ngValue]=\"entity.value\">\n                        {{entity.name}}\n                      </option>\n                    </select>\n                  </div>\n                </ng-template>\n\n                <ng-container *ngIf=\"getFieldTemplate() as template; else defaultField\">\n                  <ng-container *ngTemplateOutlet=\"template; context: getFieldContext(rule)\"></ng-container>\n                </ng-container>\n\n                <ng-template #defaultField>\n                  <div [ngClass]=\"getClassNames('fieldControlSize')\">\n                    <select [ngClass]=\"getClassNames('fieldControl')\" [(ngModel)]=\"rule.field\" (ngModelChange)=\"changeField($event, rule)\" [disabled]=\"disabled\">\n                      <option *ngFor=\"let field of getFields(rule.entity)\" [ngValue]=\"field.value\">\n                        {{field.name}}\n                      </option>\n                    </select>\n                  </div>\n                </ng-template>\n\n                <ng-container *ngIf=\"getOperatorTemplate() as template; else defaultOperator\">\n                  <ng-container *ngTemplateOutlet=\"template; context: getOperatorContext(rule)\"></ng-container>\n                </ng-container>\n\n                <ng-template #defaultOperator>\n                  <div [ngClass]=\"getClassNames('operatorControlSize')\">\n                    <select [ngClass]=\"getClassNames('operatorControl')\" [(ngModel)]=\"rule.operator\" (ngModelChange)=\"changeOperator(rule)\" [disabled]=\"disabled\">\n                      <option *ngFor=\"let operator of getOperators(rule.field)\" [ngValue]=\"operator\">\n                        {{operator}}\n                      </option>\n                    </select>\n                  </div>\n                </ng-template>\n\n                <ng-container *ngIf=\"findTemplateForRule(rule) as template; else defaultInput\">\n                  <ng-container *ngTemplateOutlet=\"template; context: getInputContext(rule)\"></ng-container>\n                </ng-container>\n\n                <ng-template #defaultInput>\n                  <div [ngClass]=\"getClassNames('inputControlSize')\" [ngSwitch]=\"getInputType(rule.field, rule.operator)\">\n                    <input [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\" [disabled]=\"disabled\"\n                      *ngSwitchCase=\"'string'\" type=\"text\">\n                    <input [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\" [disabled]=\"disabled\"\n                      *ngSwitchCase=\"'number'\" type=\"number\">\n                    <input [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\" [disabled]=\"disabled\"\n                      *ngSwitchCase=\"'date'\" type=\"date\">\n                    <input [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\" [disabled]=\"disabled\"\n                      *ngSwitchCase=\"'time'\" type=\"time\">\n                    <select [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\" [disabled]=\"disabled\"\n                      *ngSwitchCase=\"'category'\">\n                      <option *ngFor=\"let opt of getOptions(rule.field)\" [ngValue]=\"opt.value\">\n                        {{opt.name}}\n                      </option>\n                    </select>\n                    <ng-container *ngSwitchCase=\"'multiselect'\">\n                      <select [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\" [disabled]=\"disabled\"\n                        multiple>\n                        <option *ngFor=\"let opt of getOptions(rule.field)\" [ngValue]=\"opt.value\">\n                          {{opt.name}}\n                        </option>\n                      </select>\n                    </ng-container>\n                    <input [ngClass]=\"getClassNames('inputControl')\" [(ngModel)]=\"rule.value\" (ngModelChange)=\"changeInput()\" [disabled]=\"disabled\"\n                      *ngSwitchCase=\"'boolean'\" type=\"checkbox\">\n                  </div>\n                </ng-template>\n\n              </ng-container>\n              <query-builder *ngIf=\"local.ruleset\" [data]=\"rule\" [disabled]=\"disabled\" [parentTouchedCallback]=\"parentTouchedCallback || onTouchedCallback\"\n                [parentChangeCallback]=\"parentChangeCallback || onChangeCallback\" [parentInputTemplates]=\"parentInputTemplates || inputTemplates\"\n                [parentOperatorTemplate]=\"parentOperatorTemplate || operatorTemplate\" [parentFieldTemplate]=\"parentFieldTemplate || fieldTemplate\"\n                [parentEntityTemplate]=\"parentEntityTemplate || entityTemplate\" [parentSwitchGroupTemplate]=\"parentSwitchGroupTemplate || switchGroupTemplate\"\n                [parentButtonGroupTemplate]=\"parentButtonGroupTemplate || buttonGroupTemplate\" [parentRemoveButtonTemplate]=\"parentRemoveButtonTemplate || removeButtonTemplate\"\n                [parentEmptyWarningTemplate]=\"parentEmptyWarningTemplate || emptyWarningTemplate\" [parentArrowIconTemplate]=\"parentArrowIconTemplate || arrowIconTemplate\"\n                [parentValue]=\"data\" [classNames]=\"classNames\" [config]=\"config\" [allowRuleset]=\"allowRuleset\" [allowCollapse]=\"allowCollapse\"\n                [emptyMessage]=\"emptyMessage\" [operatorMap]=\"operatorMap\">\n              </query-builder>\n\n              <ng-container *ngIf=\"getEmptyWarningTemplate() as template; else defaultEmptyWarning\">\n                <ng-container *ngIf=\"local.invalid\">\n                  <ng-container *ngTemplateOutlet=\"template; context: getEmptyWarningContext()\"></ng-container>\n                </ng-container>\n              </ng-container>\n\n              <ng-template #defaultEmptyWarning>\n                <p [ngClass]=\"getClassNames('emptyWarning')\" *ngIf=\"local.invalid\">\n                  {{emptyMessage}}\n                </p>\n              </ng-template>\n            </li>\n          </ng-container>\n        </ng-container>\n      </ul>\n    </div>\n  ","styles":["\n    ﻿:host{display:block;width:100%}:host .q-icon{font-style:normal;font-size:12px}:host .q-remove-icon::before{content:'❌'}:host .q-arrow-icon-button{float:left;margin:4px 6px 4px 0;transform:rotate(90deg);transition:linear 0.25s transform;cursor:pointer}:host .q-arrow-icon-button.q-collapsed{transform:rotate(0)}:host .q-arrow-icon::before{content:'▶'}:host .q-add-icon{color:#555}:host .q-add-icon::before{content:'➕'}:host .q-remove-button{color:#B3415D;width:31px}:host .q-switch-group,:host .q-button-group{font-family:\"Lucida Grande\", Tahoma, Verdana, sans-serif;overflow:hidden}:host .q-right-align{float:right}:host .q-button{margin-left:8px;padding:0 8px;background-color:white}:host .q-button:disabled{display:none}:host .q-control-size{display:inline-block;vertical-align:top;padding-right:10px}:host .q-input-control,:host .q-operator-control,:host .q-field-control,:host .q-entity-control{display:inline-block;padding:5px 8px;color:#555;background-color:#fff;background-image:none;border:1px solid #ccc;border-radius:4px;box-sizing:border-box;width:auto}:host .q-input-control:disabled,:host .q-operator-control:disabled,:host .q-field-control:disabled,:host .q-entity-control:disabled{border-color:transparent}:host .q-operator-control,:host .q-field-control,:host .q-entity-control,:host .q-input-control:not([type='checkbox']){min-height:32px;-webkit-appearance:none}:host .q-switch-label,:host .q-button{float:left;margin-bottom:0;font-size:14px;line-height:30px;font-weight:normal;text-align:center;text-shadow:none;border:1px solid rgba(0,0,0,0.2);box-sizing:border-box}:host .q-switch-label:hover,:host .q-button:hover{cursor:pointer;background-color:#F0F0F0}:host .q-switch-label{background-color:#e4e4e4;padding:0 8px}:host .q-switch-radio{position:absolute;clip:rect(0, 0, 0, 0);height:1px;width:1px;border:0;overflow:hidden}:host .q-switch-radio:checked+.q-switch-label{border:1px solid #619ed7;background:white;color:#3176b3}:host .q-switch-radio:disabled+.q-switch-label{display:none}:host .q-switch-radio:checked:disabled+.q-switch-label{display:initial;color:initial;cursor:default;border-color:transparent}:host .q-invalid-ruleset{border:1px solid rgba(179,65,93,0.5) !important;background:rgba(179,65,93,0.1) !important}:host .q-empty-warning{color:#8d252e;text-align:center}:host .q-ruleset{border:1px solid #CCC}:host .q-rule{border:1px solid #CCC;background:white}:host .q-transition{-webkit-transition:all 0.1s ease-in-out;-moz-transition:all 0.1s ease-in-out;-ms-transition:all 0.1s ease-in-out;-o-transition:all 0.1s ease-in-out;transition:all 0.1s ease-in-out}:host .q-tree-container{width:100%;overflow:hidden;transition:ease-in 0.25s max-height}:host .q-tree-container.q-collapsed{max-height:0 !important}:host .q-tree{list-style:none;margin:4px 0 2px}:host .q-row{padding:6px 8px;margin-top:6px}:host .q-connector{position:relative}:host .q-connector::before{top:-5px;border-width:0 0 2px 2px}:host .q-connector::after{border-width:0 0 0 2px;top:50%}:host .q-connector::before,:host .q-connector::after{content:'';left:-12px;border-color:#CCC;border-style:solid;width:9px;height:calc(50% + 6px);position:absolute}:host .q-connector:last-child::after{content:none}:host .q-inline-block-display{display:inline-block;vertical-align:top}\n  "],"providers":[{"__symbolic":"reference","name":"CONTROL_VALUE_ACCESSOR"},{"__symbolic":"reference","name":"VALIDATOR"}]}]}],"members":{"disabled":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"data":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"allowRuleset":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"allowCollapse":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"emptyMessage":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"classNames":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"operatorMap":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentValue":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"config":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentArrowIconTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentInputTemplates":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentOperatorTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentFieldTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentEntityTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentSwitchGroupTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentButtonGroupTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentRemoveButtonTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentEmptyWarningTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentChangeCallback":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"parentTouchedCallback":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"treeContainer":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild"},"arguments":["treeContainer"]}]}],"buttonGroupTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":[{"__symbolic":"reference","module":"./query-button-group.directive","name":"QueryButtonGroupDirective"}]}]}],"switchGroupTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":[{"__symbolic":"reference","module":"./query-switch-group.directive","name":"QuerySwitchGroupDirective"}]}]}],"fieldTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":[{"__symbolic":"reference","module":"./query-field.directive","name":"QueryFieldDirective"}]}]}],"entityTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":[{"__symbolic":"reference","module":"./query-entity.directive","name":"QueryEntityDirective"}]}]}],"operatorTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":[{"__symbolic":"reference","module":"./query-operator.directive","name":"QueryOperatorDirective"}]}]}],"removeButtonTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":[{"__symbolic":"reference","module":"./query-remove-button.directive","name":"QueryRemoveButtonDirective"}]}]}],"emptyWarningTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":[{"__symbolic":"reference","module":"./query-empty-warning.directive","name":"QueryEmptyWarningDirective"}]}]}],"inputTemplates":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChildren"},"arguments":[{"__symbolic":"reference","module":"./query-input.directive","name":"QueryInputDirective"}]}]}],"arrowIconTemplate":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ContentChild"},"arguments":[{"__symbolic":"reference","module":"./query-arrow-icon.directive","name":"QueryArrowIconDirective"}]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ChangeDetectorRef"}]}],"ngOnInit":[{"__symbolic":"method"}],"ngOnChanges":[{"__symbolic":"method"}],"validate":[{"__symbolic":"method"}],"value":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"writeValue":[{"__symbolic":"method"}],"registerOnChange":[{"__symbolic":"method"}],"registerOnTouched":[{"__symbolic":"method"}],"setDisabledState":[{"__symbolic":"method"}],"findTemplateForRule":[{"__symbolic":"method"}],"findQueryInput":[{"__symbolic":"method"}],"getOperators":[{"__symbolic":"method"}],"getFields":[{"__symbolic":"method"}],"getInputType":[{"__symbolic":"method"}],"getOptions":[{"__symbolic":"method"}],"getClassNames":[{"__symbolic":"method"}],"getDefaultField":[{"__symbolic":"method"}],"getDefaultOperator":[{"__symbolic":"method"}],"addRule":[{"__symbolic":"method"}],"removeRule":[{"__symbolic":"method"}],"addRuleSet":[{"__symbolic":"method"}],"removeRuleSet":[{"__symbolic":"method"}],"transitionEnd":[{"__symbolic":"method"}],"toggleCollapse":[{"__symbolic":"method"}],"computedTreeContainerHeight":[{"__symbolic":"method"}],"changeCondition":[{"__symbolic":"method"}],"changeOperator":[{"__symbolic":"method"}],"coerceValueForOperator":[{"__symbolic":"method"}],"changeInput":[{"__symbolic":"method"}],"changeField":[{"__symbolic":"method"}],"changeEntity":[{"__symbolic":"method"}],"getDefaultValue":[{"__symbolic":"method"}],"getOperatorTemplate":[{"__symbolic":"method"}],"getFieldTemplate":[{"__symbolic":"method"}],"getEntityTemplate":[{"__symbolic":"method"}],"getArrowIconTemplate":[{"__symbolic":"method"}],"getButtonGroupTemplate":[{"__symbolic":"method"}],"getSwitchGroupTemplate":[{"__symbolic":"method"}],"getRemoveButtonTemplate":[{"__symbolic":"method"}],"getEmptyWarningTemplate":[{"__symbolic":"method"}],"getQueryItemClassName":[{"__symbolic":"method"}],"getButtonGroupContext":[{"__symbolic":"method"}],"getRemoveButtonContext":[{"__symbolic":"method"}],"getFieldContext":[{"__symbolic":"method"}],"getEntityContext":[{"__symbolic":"method"}],"getSwitchGroupContext":[{"__symbolic":"method"}],"getArrowIconContext":[{"__symbolic":"method"}],"getEmptyWarningContext":[{"__symbolic":"method"}],"getOperatorContext":[{"__symbolic":"method"}],"getInputContext":[{"__symbolic":"method"}],"checkEmptyRuleInRuleset":[{"__symbolic":"method"}],"validateRulesInRuleset":[{"__symbolic":"method"}],"handleDataChange":[{"__symbolic":"method"}],"handleTouched":[{"__symbolic":"method"}]}}}}]